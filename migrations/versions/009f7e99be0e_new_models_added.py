"""new_models_added

Revision ID: 009f7e99be0e
Revises: 634fdcb11f8d
Create Date: 2023-07-06 18:19:58.554028

"""
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

from alembic import op

# revision identifiers, used by Alembic.
revision = "009f7e99be0e"
down_revision = "634fdcb11f8d"
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(
        "ix_crypto_currency_data_historical_crypto_currency_data_cc90",
        table_name="crypto_currency_data_historical",
    )
    op.drop_index(
        "ix_crypto_currency_data_historical_id",
        table_name="crypto_currency_data_historical",
    )
    op.drop_index(
        "ix_crypto_currency_data_historical_symbol",
        table_name="crypto_currency_data_historical",
    )
    op.drop_table("crypto_currency_data_historical")
    op.add_column(
        "market_data_historical",
        sa.Column(
            "asset_type",
            sa.Enum("NYSE", "LSE", "CRYPTOCURRENCY", name="assettype"),
            nullable=False,
        ),
    )
    op.alter_column(
        "portfolio_stock",
        "purchase_date",
        existing_type=sa.VARCHAR(),
        type_=sa.DateTime(),
        existing_nullable=False,
        postgresql_using="purchase_date::timestamp without time zone",
    )
    op.create_foreign_key(
        None,
        "portfolio_stock",
        "market_data_historical",
        ["asset_id"],
        ["market_data_historical_id"],
    )
    op.drop_column("portfolio_stock", "asset_type")
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column(
        "portfolio_stock",
        sa.Column(
            "asset_type",
            postgresql.ENUM("STOCK", "CRYPTOCURRENCY", name="assettype"),
            autoincrement=False,
            nullable=False,
        ),
    )
    op.drop_constraint(None, "portfolio_stock", type_="foreignkey")
    op.alter_column(
        "portfolio_stock",
        "purchase_date",
        existing_type=sa.DateTime(),
        type_=sa.VARCHAR(),
        existing_nullable=False,
    )
    op.drop_column("market_data_historical", "asset_type")
    op.create_table(
        "crypto_currency_data_historical",
        sa.Column(
            "id",
            sa.INTEGER(),
            sa.Identity(
                always=False,
                start=1,
                increment=1,
                minvalue=1,
                maxvalue=2147483647,
                cycle=True,
                cache=1,
            ),
            autoincrement=True,
            nullable=False,
        ),
        sa.Column(
            "crypto_currency_data_historical_id",
            sa.UUID(),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column("date", sa.DATE(), autoincrement=False, nullable=False),
        sa.Column("name", sa.VARCHAR(length=50), autoincrement=False, nullable=False),
        sa.Column("symbol", sa.VARCHAR(length=50), autoincrement=False, nullable=False),
        sa.Column(
            "open",
            sa.DOUBLE_PRECISION(precision=53),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            "high",
            sa.DOUBLE_PRECISION(precision=53),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            "low",
            sa.DOUBLE_PRECISION(precision=53),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            "close",
            sa.DOUBLE_PRECISION(precision=53),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column("volume", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.Column(
            "created_at", postgresql.TIMESTAMP(), autoincrement=False, nullable=True
        ),
        sa.Column(
            "updated_at", postgresql.TIMESTAMP(), autoincrement=False, nullable=True
        ),
        sa.Column(
            "deleted_at", postgresql.TIMESTAMP(), autoincrement=False, nullable=True
        ),
        sa.PrimaryKeyConstraint(
            "id",
            "crypto_currency_data_historical_id",
            name="crypto_currency_data_historical_pkey",
        ),
    )
    op.create_index(
        "ix_crypto_currency_data_historical_symbol",
        "crypto_currency_data_historical",
        ["symbol"],
        unique=False,
    )
    op.create_index(
        "ix_crypto_currency_data_historical_id",
        "crypto_currency_data_historical",
        ["id"],
        unique=False,
    )
    op.create_index(
        "ix_crypto_currency_data_historical_crypto_currency_data_cc90",
        "crypto_currency_data_historical",
        ["crypto_currency_data_historical_id"],
        unique=False,
    )
    # ### end Alembic commands ###
